// @flow
import { connect, emptyCell, write } from '.'

// Create cells to hold temperature values in various units
const celsius = emptyCell()
const fahrenheit = emptyCell()
const kelvin = emptyCell()

// Temperature conversion functions
// These could be generated by a constraint solver, for example
const c2f = c => (c * 9.0 / 5.0) + 32
const f2c = f => (f - 32) * (5.0 / 9.0)
const c2k = c => c + 273.15
const k2c = k => k - 273.15
const k2f = k => c2f(k2c(k))
const f2k = f => c2k(f2c(f))

// Setup relationships between temperature cells, such that
// whenever one changes, the others are updated.
// Obviously, this creates a cyclic graph.  That's not
// a problem because Cells use a merge strategy that
// only propagates updates when they are "meaningful", that is,
// they added new information (as defined by the merge
// strategy) to the cell's value.
// These cells are using the default merge strategy which just
// uses `===` to determine if an update is meaningful or not.
connect(c2f, celsius, fahrenheit)
connect(c2k, celsius, kelvin)
connect(f2c, fahrenheit, celsius)
connect(f2k, fahrenheit, kelvin)
connect(k2c, kelvin, celsius)
connect(k2f, kelvin, fahrenheit)

console.log(celsius, fahrenheit, kelvin)
write(23, celsius)
console.log(celsius, fahrenheit, kelvin)
write(0, celsius)
console.log(celsius, fahrenheit, kelvin)
write(212, fahrenheit)
console.log(celsius, fahrenheit, kelvin)
write(0, kelvin)
console.log(celsius, fahrenheit, kelvin)
